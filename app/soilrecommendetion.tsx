// CropRecommendation.tsx (Form Hide/Show Logic Added)

import React, { FC, useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TextInput, TouchableOpacity, Dimensions, Alert, ActivityIndicator, Image } from 'react-native';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';

const { width } = Dimensions.get('window');

// --- Component Data ---
interface SoilParameter {
Â  name: string;
Â  yourValue: number | string;
Â  optimalMin: number;
Â  optimalMax: number;
Â  unit: string;
}

interface CropRecommendation {
Â  id: number;
Â  name: string;
Â  matchScore: number; 
Â  imagePlaceholder: 'wheat' | 'maize' | 'mustard'; 
}

// Updated Mock Recommendations with image placeholders
const mockRecommendations: CropRecommendation[] = [
Â  { id: 1, name: 'Wheat (Rabi)', matchScore: 92, imagePlaceholder: 'wheat' },
Â  { id: 2, name: 'Maize (Kharif)', matchScore: 78, imagePlaceholder: 'maize' },
Â  { id: 3, name: 'Mustard (Rabi)', matchScore: 65, imagePlaceholder: 'mustard' },
];

// Mock IoT Data (Simulating reading from backend)
const mockIotData = {
Â  N: 85, 
Â  P: 42, 
Â  K: 35, 
Â  pH: 6.2,
Â  temperature: 28.5, 
Â  rainfall: 1100,
};

// Optimal Ranges for Comparison (Example Data)
const optimalRanges = {
Â  N: { min: 60, max: 90 },
Â  P: { min: 30, max: 55 },
Â  K: { min: 30, max: 50 },
Â  pH: { min: 5.5, max: 7.0 },
};
// ------------------------------------------

const CropRecommendation: FC = () => {
Â  // --- NEW STATE FOR UI CONTROL ---
Â  const [showForm, setShowForm] = useState(true); // Control visibility of input form

Â  const [nitrogen, setNitrogen] = useState('');
Â  const [phosphorus, setPhosphorus] = useState('');
Â  const [potassium, setPotassium] = useState('');
Â  const [ph, setPh] = useState('');
Â  const [temperature, setTemperature] = useState('');
Â  const [rainfall, setRainfall] = useState('');
Â  const [iotDataLoaded, setIotDataLoaded] = useState(false); // Kept for tracking data source

Â  const [loading, setLoading] = useState(false);
Â  const [results, setResults] = useState<CropRecommendation[] | null>(null);

Â  // --- Helper for Mock Images ---
Â  const getCropImageSource = (placeholder: 'wheat' | 'maize' | 'mustard') => {
Â  Â  switch (placeholder) {
Â  Â  Â  case 'wheat':
Â  Â  Â  Â  return { uri: 'https://cdn.pixabay.com/photo/2017/08/21/04/45/grain-2663953_960_720.jpg' };
Â  Â  Â  case 'maize':
Â  Â  Â  Â  return { uri: 'https://cdn.pixabay.com/photo/2014/05/29/18/08/corn-358055_960_720.jpg' };
Â  Â  Â  case 'mustard':
Â  Â  Â  Â  return { uri: 'https://cdn.pixabay.com/photo/2016/06/13/20/43/mustard-field-1454655_960_720.jpg' };
Â  Â  Â  default:
Â  Â  Â  Â  return { uri: 'https://via.placeholder.com/150/90EE90/FFFFFF?text=Crop' };
Â  Â  }
Â  };

Â  // --- Function to fetch/load IoT data ---
Â  const fetchIotData = () => {
Â  Â  setLoading(true);
Â  Â  setResults(null); 
Â  Â  setShowForm(true); // Ensure form is visible during input/load

Â  Â  // Simulate API call
Â  Â  setTimeout(() => {
Â  Â  Â  setNitrogen(String(mockIotData.N));
Â  Â  Â  setPhosphorus(String(mockIotData.P));
Â  Â  Â  setPotassium(String(mockIotData.K));
Â  Â  Â  setPh(String(mockIotData.pH));
Â  Â  Â  setTemperature(String(mockIotData.temperature));
Â  Â  Â  setRainfall(String(mockIotData.rainfall));
Â  Â  Â  
Â  Â  Â  setIotDataLoaded(true);
Â  Â  Â  setLoading(false);
Â  Â  Â  Alert.alert('Success', 'IoT data successfully loaded and filled. Press "Get Crop Prediction" to analyze.');
Â  Â  }, 1500); 
Â  };

Â  const handlePredict = () => {
Â  Â  // Validation
Â  Â  if (!nitrogen || !phosphorus || !potassium || !ph || !temperature || !rainfall) {
Â  Â  Â  Alert.alert('Error', 'Please fill all parameters.');
Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  setLoading(true);
Â  Â  setResults(null); // Clear previous results while loading

Â  Â  // Simulate AI/ML Logic
Â  Â  setTimeout(() => {
Â  Â  Â  setResults(mockRecommendations);
Â  Â  Â  setLoading(false);
Â  Â  Â  setShowForm(false); // <<< HIDE THE FORM after successful prediction >>>
Â  Â  Â  Alert.alert('Prediction Complete', 'Your personalized crop recommendations are ready!');
Â  Â  }, 2000); 
Â  };

Â  // --- NEW FUNCTION TO UNHIDE FORM AND HIDE RESULTS ---
Â  const handleEditForm = () => {
Â  Â  setShowForm(true); 
Â  Â  setResults(null); 
Â  Â  Alert.alert('Form Visible', 'You can now edit the input parameters.');
Â  };

Â  // --- Comparison Logic ---
Â  const getSoilComparisonData = (): SoilParameter[] => {
Â  Â  return [
Â  Â  Â  { name: 'Nitrogen (N)', yourValue: nitrogen, optimalMin: optimalRanges.N.min, optimalMax: optimalRanges.N.max, unit: 'kg/ha' },
Â  Â  Â  { name: 'Phosphorus (P)', yourValue: phosphorus, optimalMin: optimalRanges.P.min, optimalMax: optimalRanges.P.max, unit: 'kg/ha' },
Â  Â  Â  { name: 'Potassium (K)', yourValue: potassium, optimalMin: optimalRanges.K.min, optimalMax: optimalRanges.K.max, unit: 'kg/ha' },
Â  Â  Â  { name: 'pH Level', yourValue: ph, optimalMin: optimalRanges.pH.min, optimalMax: optimalRanges.pH.max, unit: '' },
Â  Â  ];
Â  };

Â  const getMatchStatus = (value: number, min: number, max: number) => {
Â  Â  if (value >= min && value <= max) return { text: 'Perfect', color: '#4CAF50' }; 
Â  Â  if (value < min) return { text: 'Low', color: '#FF9800' }; 
Â  Â  return { text: 'High', color: '#E53935' }; 
Â  };

Â  // --- Renderer Functions ---

Â  const renderInputCard = (label: string, value: string, setValue: (v: string) => void, placeholder: string, icon: string, isNumeric: boolean = true) => (
Â  Â  <View style={styles.inputCard}>
Â  Â  Â  <MaterialCommunityIcons name={icon} size={20} color={styles.themeColor.color} style={styles.inputIcon} />
Â  Â  Â  <View style={{ flex: 1 }}>
Â  Â  Â  Â  <Text style={styles.inputLabel}>{label}</Text>
Â  Â  Â  Â  <TextInput
Â  Â  Â  Â  Â  style={styles.textInput}
Â  Â  Â  Â  Â  value={value}
Â  Â  Â  Â  Â  onChangeText={setValue}
Â  Â  Â  Â  Â  placeholder={placeholder}
Â  Â  Â  Â  Â  placeholderTextColor="#90A4AE"
Â  Â  Â  Â  Â  keyboardType={isNumeric ? 'numeric' : 'default'}
Â  Â  Â  Â  />
Â  Â  Â  </View>
Â  Â  </View>
Â  );

Â  const renderSoilComparison = (data: SoilParameter[]) => (
Â  Â  <View style={styles.comparisonTable}>
Â  Â  Â  <Text style={styles.comparisonTitle}>Soil Parameter Comparison</Text>
Â  Â  Â  <View style={styles.comparisonHeader}>
Â  Â  Â  Â  <Text style={[styles.comparisonCell, styles.comparisonHeaderText, { flex: 2 }]}>Parameter</Text>
Â  Â  Â  Â  <Text style={[styles.comparisonCell, styles.comparisonHeaderText, { flex: 1 }]}>Your Soil</Text>
Â  Â  Â  Â  <Text style={[styles.comparisonCell, styles.comparisonHeaderText, { flex: 1 }]}>Optimal</Text>
Â  Â  Â  Â  <Text style={[styles.comparisonCell, styles.comparisonHeaderText, { flex: 1 }]}>Match</Text>
Â  Â  Â  </View>
Â  Â  Â  {data.map((param, index) => {
Â  Â  Â  Â  const value = parseFloat(String(param.yourValue));
Â  Â  Â  Â  const status = getMatchStatus(value, param.optimalMin, param.optimalMax);
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <View key={index} style={styles.comparisonRow}>
Â  Â  Â  Â  Â  Â  <Text style={[styles.comparisonCell, { flex: 2 }]}>{param.name}</Text>
Â  Â  Â  Â  Â  Â  <Text style={[styles.comparisonCell, { flex: 1 }]}>{param.yourValue} {param.unit ? `(${param.unit})` : ''}</Text>
Â  Â  Â  Â  Â  Â  <Text style={[styles.comparisonCell, { flex: 1 }]}>{param.optimalMin}-{param.optimalMax}</Text>
Â  Â  Â  Â  Â  Â  <Text style={[styles.comparisonCell, { flex: 1, color: status.color, fontWeight: '600' }]}>{status.text}</Text>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  );
Â  Â  Â  })}
Â  Â  </View>
Â  );

Â  const renderRecommendationCard = (crop: CropRecommendation, index: number) => (
Â  Â  <View key={crop.id} style={styles.imageResultCard}>
Â  Â  Â  {/* Crop Image/Placeholder */}
Â  Â  Â  <Image
Â  Â  Â  Â  source={getCropImageSource(crop.imagePlaceholder)}
Â  Â  Â  Â  style={styles.cropImage}
Â  Â  Â  Â  resizeMode="cover"
Â  Â  Â  />

Â  Â  Â  <View style={styles.resultDetailsContainer}>
Â  Â  Â  Â  {/* Rank and Name */}
Â  Â  Â  Â  <View style={styles.rankContainer}>
Â  Â  Â  Â  Â  <Text style={styles.cropRank}>TOP #{index + 1}</Text>
Â  Â  Â  Â  Â  <Text style={styles.cropName}>{crop.name}</Text>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Progress Bar for Match Score */}
Â  Â  Â  Â  <View style={styles.progressBarWrapper}>
Â  Â  Â  Â  Â  <View style={styles.progressBarContainer}>
Â  Â  Â  Â  Â  Â  <View style={[styles.progressBarFill, { width: `${crop.matchScore}%` }]}>
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.progressBarText}>{crop.matchScore}% Match</Text>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Action Button */}
Â  Â  Â  Â  <TouchableOpacity style={styles.viewDetailButton}>
Â  Â  Â  Â  Â  <Text style={styles.viewDetailButtonText}>View Details</Text>
Â  Â  Â  Â  Â  <MaterialCommunityIcons name="arrow-right" size={16} color="#2E7D32" style={{marginLeft: 5}}/>
Â  Â  Â  Â  </TouchableOpacity>

Â  Â  Â  </View>
Â  Â  </View>
Â  );

Â  return (
Â  Â  <ScrollView style={styles.container}>
Â  Â  Â  {/* --- Header Section --- */}
Â  Â  Â  <View style={styles.header}>
Â  Â  Â  Â  <Text style={styles.title}>ðŸŒ± Crop Recommendation</Text>
Â  Â  Â  Â  <Text style={styles.subtitle}>Enter the parameters or fetch IoT data to get the best crop suggestion.</Text>
Â  Â  Â  </View>

Â  Â  Â  {/* --- EDIT FORM BUTTON (Visible only after results are shown) --- */}
Â  Â  Â  {results && (
Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  style={styles.editButton}
Â  Â  Â  Â  Â  onPress={handleEditForm}
Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <MaterialCommunityIcons name="pencil" size={18} color="#2E7D32" style={{marginRight: 8}}/>
Â  Â  Â  Â  Â  <Text style={styles.editButtonText}>Edit Parameters / Re-analyze</Text>
Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  )}

Â  Â  Â  {/* --- Input Section (Conditionally Rendered) --- */}
Â  Â  Â  {showForm && (
Â  Â  Â  Â  <View style={styles.inputSection}>
Â  Â  Â  Â  Â  <Text style={styles.sectionTitle}>Required Soil & Environment Parameters</Text>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* Input Fields */}
Â  Â  Â  Â  Â  <View style={{marginTop: 15}}>
Â  Â  Â  Â  Â  Â  {renderInputCard('Nitrogen (N)', nitrogen, setNitrogen, 'Enter N level (kg/ha)', 'atom-variant', true)}
Â  Â  Â  Â  Â  Â  {renderInputCard('Phosphorus (P)', phosphorus, setPhosphorus, 'Enter P level (kg/ha)', 'atom-variant', true)}
Â  Â  Â  Â  Â  Â  {renderInputCard('Potassium (K)', potassium, setPotassium, 'Enter K level (kg/ha)', 'atom-variant', true)}
Â  Â  Â  Â  Â  Â  {renderInputCard('pH Level', ph, setPh, 'Enter pH value (5.5 - 7.0)', 'water', true)}
Â  Â  Â  Â  Â  Â  {renderInputCard('Temperature (Â°C)', temperature, setTemperature, 'Enter average temp (e.g., 28.5)', 'thermometer', true)}
Â  Â  Â  Â  Â  Â  {renderInputCard('Rainfall (mm)', rainfall, setRainfall, 'Enter annual rainfall (e.g., 1100)', 'weather-rainy', true)}
Â  Â  Â  Â  Â  </View>

Â  Â  Â  Â  Â  {/* IoT Load Button (Placed below input fields) */}
Â  Â  Â  Â  Â  <TouchableOpacity 
Â  Â  Â  Â  Â  Â  style={[styles.iotLoadButton, loading && { opacity: 0.6 }]} 
Â  Â  Â  Â  Â  Â  onPress={fetchIotData}
Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  Â  Â  <ActivityIndicator color="#fff" />
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.iotLoadButtonText}>Load Latest Data from IoT Device ðŸ“¡</Text>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* Predict Button */}
Â  Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  Â  style={[styles.predictButton, loading && { opacity: 0.6 }]}
Â  Â  Â  Â  Â  Â  onPress={handlePredict}
Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Text style={styles.predictButtonText}>
Â  Â  Â  Â  Â  Â  Â  {loading ? 'Analyzing...' : 'Get Crop Prediction'}
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  </View>
Â  Â  Â  )}


Â  Â  Â  {/* --- Results Section (Conditionally Rendered) --- */}
Â  Â  Â  {results && (
Â  Â  Â  Â  <View style={styles.resultsSection}>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* 1. Recommended Crops */}
Â  Â  Â  Â  Â  <Text style={styles.sectionTitle}>Top Recommended Crops</Text>
Â  Â  Â  Â  Â  <View style={styles.resultsGrid}>
Â  Â  Â  Â  Â  Â  {results.map(renderRecommendationCard)}
Â  Â  Â  Â  Â  </View>

Â  Â  Â  Â  Â  {/* 2. Soil Comparison */}
Â  Â  Â  Â  Â  {renderSoilComparison(getSoilComparisonData())}

Â  Â  Â  Â  </View>
Â  Â  Â  )}
Â  Â  Â  
Â  Â  Â  {(!results && !loading && showForm) && (
Â  Â  Â  Â  <Text style={{...styles.statusText, color: '#607D8B'}}>Fill the form or load IoT data to view personalized crop recommendations.</Text>
Â  Â  Â  )}
Â  Â  Â  
Â  Â  Â  {/* Space at the bottom */}
Â  Â  Â  <View style={{height: 50}}/> 

Â  Â  </ScrollView>
Â  );
};

// --- Styles (Updated) ---
const styles = StyleSheet.create({
Â  // Theme Colors
Â  themeColor: { color: '#388E3C' }, 
Â  lightThemeColor: { color: '#4CAF50' }, 
Â  
Â  container: {
Â  Â  flex: 1,
Â  Â  padding: 16,
Â  Â  backgroundColor: '#F9F9F9',
Â  },
Â  header: {
Â  Â  marginBottom: 20,
Â  Â  paddingVertical: 10,
Â  Â  borderBottomWidth: 1,
Â  Â  borderBottomColor: '#E0E0E0', 
Â  },
Â  title: {
Â  Â  fontSize: 24,
Â  Â  fontWeight: '700',
Â  Â  color: '#2E7D32',
Â  },
Â  subtitle: {
Â  Â  fontSize: 16,
Â  Â  color: '#607D8B', 
Â  Â  marginTop: 4,
Â  },
Â  sectionTitle: {
Â  Â  fontSize: 20,
Â  Â  fontWeight: '700',
Â  Â  color: '#2E7D32',
Â  Â  marginBottom: 15,
Â  Â  marginTop: 10,
Â  },

Â  // NEW EDIT BUTTON STYLE
Â  editButton: {
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  Â  justifyContent: 'center',
Â  Â  backgroundColor: '#E8F5E9', // Very light green
Â  Â  padding: 15,
Â  Â  borderRadius: 10,
Â  Â  marginBottom: 20,
Â  Â  borderWidth: 1,
Â  Â  borderColor: '#A5D6A7', // Light border
Â  },
Â  editButtonText: {
Â  Â  color: '#2E7D32',
Â  Â  fontWeight: 'bold',
Â  Â  fontSize: 16,
Â  },


Â  // IoT Load Button 
Â  iotLoadButton: {
Â  Â  backgroundColor: '#388E3C', 
Â  Â  padding: 18,
Â  Â  borderRadius: 10,
Â  Â  alignItems: 'center',
Â  Â  marginBottom: 15,
Â  Â  elevation: 6,
Â  Â  shadowColor: '#388E3C',
Â  Â  shadowOffset: { width: 0, height: 3 },
Â  Â  shadowOpacity: 0.3,
Â  Â  shadowRadius: 4,
Â  },
Â  iotLoadButtonText: {
Â  Â  color: '#FFFFFF',
Â  Â  fontWeight: 'bold',
Â  Â  fontSize: 16,
Â  },

Â  // Input Cards
Â  inputSection: {
Â  Â  marginBottom: 20,
Â  },
Â  inputCard: {
Â  Â  backgroundColor: '#FFFFFF',
Â  Â  padding: 15,
Â  Â  borderRadius: 10,
Â  Â  marginBottom: 10,
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  Â  borderWidth: 1,
Â  Â  borderColor: '#E0E0E0',
Â  Â  elevation: 1,
Â  Â  shadowColor: '#000',
Â  Â  shadowOffset: { width: 0, height: 1 },
Â  Â  shadowOpacity: 0.05,
Â  Â  shadowRadius: 1,
Â  },
Â  inputIcon: {
Â  Â  marginRight: 10,
Â  Â  width: 20,
Â  },
Â  inputLabel: {
Â  Â  fontSize: 12,
Â  Â  fontWeight: '600',
Â  Â  color: '#757575', 
Â  },
Â  textInput: {
Â  Â  paddingVertical: 4,
Â  Â  fontSize: 16,
Â  Â  color: '#263238',
Â  },

Â  // Predict Button 
Â  predictButton: {
Â  Â  backgroundColor: '#2E7D32', 
Â  Â  padding: 15,
Â  Â  borderRadius: 10,
Â  Â  alignItems: 'center',
Â  Â  marginBottom: 30,
Â  Â  elevation: 8, 
Â  Â  shadowColor: '#2E7D32',
Â  Â  shadowOffset: { width: 0, height: 4 },
Â  Â  shadowOpacity: 0.4,
Â  Â  shadowRadius: 5,
Â  },
Â  predictButtonText: {
Â  Â  color: '#FFFFFF',
Â  Â  fontSize: 18,
Â  Â  fontWeight: 'bold',
Â  },
Â  
Â  // Results Section
Â  resultsSection: {
Â  Â  marginBottom: 50,
Â  },
Â  statusText: {
Â  Â  fontSize: 16,
Â  Â  textAlign: 'center',
Â  Â  marginTop: 20,
Â  },
Â  resultsGrid: {
Â  Â  marginBottom: 20,
Â  Â  gap: 15, 
Â  },

Â  // Recommendation Cards (Unchanged styles)
Â  imageResultCard: {
Â  Â  backgroundColor: '#FFFFFF',
Â  Â  borderRadius: 12,
Â  Â  overflow: 'hidden',
Â  Â  flexDirection: 'row',
Â  Â  elevation: 6, 
Â  Â  shadowColor: '#000',
Â  Â  shadowOffset: { width: 0, height: 3 },
Â  Â  shadowOpacity: 0.15, 
Â  Â  shadowRadius: 6,
Â  Â  borderWidth: 1,
Â  Â  borderColor: '#F0F0F0', 
Â  },
Â  cropImage: {
Â  Â  width: width * 0.35, 
Â  Â  height: 'auto',
Â  Â  minHeight: 130,
Â  },
Â  resultDetailsContainer: {
Â  Â  flex: 1,
Â  Â  padding: 15,
Â  Â  justifyContent: 'space-between',
Â  },
Â  rankContainer: {
Â  Â  marginBottom: 5,
Â  },
Â  cropRank: {
Â  Â  fontSize: 12,
Â  Â  fontWeight: 'bold',
Â  Â  color: '#FFFFFF',
Â  Â  backgroundColor: '#4CAF50', 
Â  Â  paddingHorizontal: 8,
Â  Â  paddingVertical: 2,
Â  Â  borderRadius: 4,
Â  Â  alignSelf: 'flex-start',
Â  Â  marginBottom: 5,
Â  },
Â  cropName: {
Â  Â  fontSize: 19,
Â  Â  fontWeight: '800',
Â  Â  color: '#2E7D32',
Â  },
Â  progressBarWrapper: {
Â  Â  paddingVertical: 5,
Â  },
Â  progressBarContainer: {
Â  Â  height: 22,
Â  Â  backgroundColor: '#E0E0E0',
Â  Â  borderRadius: 11, 
Â  Â  overflow: 'hidden',
Â  Â  justifyContent: 'center',
Â  },
Â  progressBarFill: {
Â  Â  height: '100%',
Â  Â  backgroundColor: '#4CAF50', 
Â  Â  justifyContent: 'center',
Â  Â  alignItems: 'flex-end',
Â  Â  paddingRight: 8,
Â  },
Â  progressBarText: {
Â  Â  color: '#FFFFFF',
Â  Â  fontWeight: 'bold',
Â  Â  fontSize: 12,
Â  Â  textShadowColor: 'rgba(0, 0, 0, 0.2)', 
Â  Â  textShadowOffset: {width: 1, height: 1},
Â  Â  textShadowRadius: 2,
Â  },
Â  viewDetailButton: {
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  Â  alignSelf: 'flex-end',
Â  Â  paddingHorizontal: 12,
Â  Â  paddingVertical: 6,
Â  Â  borderRadius: 50,
Â  Â  borderWidth: 1,
Â  Â  borderColor: '#A5D6A7',
Â  Â  backgroundColor: '#E8F5E9',
Â  },
Â  viewDetailButtonText: {
Â  Â  color: '#2E7D32',
Â  Â  fontWeight: '700',
Â  Â  fontSize: 14,
Â  },

Â  // Comparison Table (Unchanged styles)
Â  comparisonTable: {
Â  Â  backgroundColor: '#FFFFFF',
Â  Â  borderRadius: 10,
Â  Â  padding: 15,
Â  Â  marginTop: 20,
Â  Â  elevation: 3,
Â  Â  shadowColor: '#000',
Â  Â  shadowOffset: { width: 0, height: 2 },
Â  Â  shadowOpacity: 0.1,
Â  Â  shadowRadius: 3,
Â  },
Â  comparisonTitle: {
Â  Â  fontSize: 18,
Â  Â  fontWeight: 'bold',
Â  Â  color: '#388E3C',
Â  Â  marginBottom: 10,
Â  Â  borderBottomWidth: 1,
Â  Â  borderBottomColor: '#E0E0E0',
Â  Â  paddingBottom: 5,
Â  },
Â  comparisonHeader: {
Â  Â  flexDirection: 'row',
Â  Â  paddingVertical: 10,
Â  Â  borderBottomWidth: 2,
Â  Â  borderBottomColor: '#388E3C',
Â  Â  backgroundColor: '#E8F5E9',
Â  Â  paddingHorizontal: 5,
Â  Â  borderTopLeftRadius: 6,
Â  Â  borderTopRightRadius: 6,
Â  },
Â  comparisonHeaderText: {
Â  Â  fontWeight: 'bold',
Â  Â  color: '#388E3C',
Â  Â  fontSize: 14,
Â  },
Â  comparisonRow: {
Â  Â  flexDirection: 'row',
Â  Â  paddingVertical: 10,
Â  Â  borderBottomWidth: 1,
Â  Â  borderBottomColor: '#F0F0F0',
Â  Â  paddingHorizontal: 5,
Â  },
Â  comparisonCell: {
Â  Â  fontSize: 13,
Â  Â  color: '#455A64',
Â  Â  textAlign: 'center',
Â  Â  paddingHorizontal: 2,
Â  Â  alignSelf: 'center',
Â  },
});

export default CropRecommendation;